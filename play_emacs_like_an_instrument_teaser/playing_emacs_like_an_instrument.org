#+TITLE:     Play Emacs like an instrument \newline - Teaser -
#+AUTHOR:    \includegraphics[height=0.8cm]{images/Logo_200ok.png} \newline 200ok GmbH
#+EMAIL:
#+DATE:      Alain M. Lafon, 2019-10-26 \newline alain@200ok.ch
#+KEYWORDS:  beamer org orgmode
#+LANGUAGE:  en

#+STARTUP: beamer showeverything

#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_THEME: metropolis

#+BEGIN_EXPORT latex
\addtobeamertemplate{frametitle}{}{%
\begin{tikzpicture}[remember picture,overlay]
\node[anchor=north east,yshift=2pt] at (current page.north east) {\includegraphics[height=0.8cm]{images/Logo_200ok_white.png}};
\end{tikzpicture}}

% Call \framedgraphic with either {filename.jpg} or [size]{filename.jpg}
\newcommand{\framedgraphic}[2][0.7] {
  \center\includegraphics[width=\textwidth,height=#1\textheight,keepaspectratio]{#2}
}
#+END_EXPORT

# First level headlines for sections and the second (hence H:2) for frames
#+OPTIONS:   H:2 toc:t ^:{}

# selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

* Introduction

** About me                                                        :noexport:

*** Alain M. Lafon
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    [[file:images/alain.jpg]]

*** CV
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    - CEO 200ok GmbH
    - Lecturer at ZHAW
    - Zen Monk, runs the Lambda [[http://zen-temple.net/zen-temples/lambda-zen-temple/introduction/][Zen Temple]]

**** Contact

alain@200ok.ch


** The tiger bites the thrower,\newline the dog chases the mud-ball

*** Proposition

 - Most work on the computer is based on either text processing or text
   consumption
 - Not having a general text editor at your disposal is like being a
   carpenter and only having a hammer in the toolbox


** The tiger bites the thrower,\newline the dog chases the mud-ball

*** Emacs is a great general text processor

- Emacs is a *Lisp REPL*
- It is *self documenting*
- It can be *changed drastically* by the user while it is running

- To me, it is the Swiss Army knife, not of text processors, but
 ultimately of programs


** Original talk

- This *lightning talk* is a teaser of the original talk
- It'll give you an impression on whether it's worth for you to watch
  the original talk or not

\center\rule{0.5\paperwidth}{0.4pt}

- I'll cover *a lot* of ground in the original talk
  - That's because I spend most of my /computer time/ in Emacs
  - Also, there will be lots of background-info up-front
  - It is *not* a lightning talk
    - It's about 2h long \(^_^)/

** Definitions                                                     :noexport:

*** Playing

- Play is a range of voluntary, intrinsically motivated activities[fn:8]
- Play occurs at any life stage[fn:8]
- (Self-) Exploration

That actually used to be the definition of Hacking.[fn:9]

Maybe we are on to something!

** Definitions                                                     :noexport:

*** Playing an instrument

\framedgraphic{images/what_is_playing.jpg}



* Impressions
** Impressions
*** The faces of Emacs

- Some impressions of the talk
- I call them "The faces of Emacs"


** The faces of Emacs

*** Inception (obviously)

\framedgraphic[0.6]{images/emacs_demo_inception.png} [fn:7]

** The faces of Emacs

*** Mail (Text and HTML)

\framedgraphic[0.6]{images/emacs_demo_mu4e.png} [fn:17]

** The faces of Emacs

*** Git

\framedgraphic[0.6]{images/emacs_demo_magit.png} [fn:21]

** The faces of Emacs

*** Organization

\framedgraphic[0.6]{images/emacs_demo_org1.png} [fn:18]

** The faces of Emacs

*** Browsing the web (distraction/tracking free)

\framedgraphic[0.6]{images/emacs_demo_eww.png} [fn:19]

** The faces of Emacs

*** Someone might even use Emacs for coding

\framedgraphic[0.6]{images/emacs_demo_cider.png} [fn:20]

** The faces of Emacs

\center\textbf{Infinite diversity in infinite combinations}

\center Ok then, but what *is* Emacs?

* Definition time

** What even is Emacs?

*** =C-h i= (Emacs FAQ -> Status of Emacs)

\framedgraphic{images/emacs_definition.png}

** So... Emacs is software from 1976?!

*** Every other old software is *young* compared to that

- The first VIM release was 1991
  - Says [[https://en.wikipedia.org/wiki/Vim_(text_editor)][Wikipedia]][fn:3], I couldn't find it in the VIM in-editor
    docs, on vim.org the original VIM 1.0 source of thje git repo of
    current VIM (8.0).
- Linux appeared in 1991, as well[fn:5]
- Only C is (slightly) older (1972) [fn:6]

** So... Emacs is software from 1976?!                             :noexport:

*** Maybe once upon a time, Emacs was good looking

\framedgraphic{images/thor_0.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** And super powerful

\framedgraphic{images/thor_1b.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** But, maybe, dancing with old age...

\framedgraphic{images/thor_2.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** Slowly wore it down...

\framedgraphic{images/thor_3.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** Puts it to its place

\framedgraphic{images/thor_4.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** † And it should be buried †

\framedgraphic{images/thor_5.jpg}

** So... Emacs is software from 1976?!                             :noexport:

*** Or so you might think

- However, the opposite is true!

*** You want to know why?

- You're at the right place!
# - Come and watch my original talk
# - Video and slides:
#   https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html

** Image attribution                                               :noexport:

\framedgraphic{images/valhalla_movie.jpg} [fn:4]


** GNU

*** Emacs is the mother of all *Free Software*

**** M-x describe-gnu-project
    :PROPERTIES:
    :BEAMER_col: 0.50
    :BEAMER_env: block
    :END:

- GCC
- GNU
- Emacs

**** ⋆
    :PROPERTIES:
    :BEAMER_col: 0.50
    :BEAMER_env: block
    :END:

- GPL
- FSF
- GNU/Linux

*** GNU Emacs

The Emacs tutorial (=C-h t=) dates the copyright to 1985.

** GNU

*** What is GNU?[fn:2]

#+BEGIN_QUOTE
GNU is an operating system that is free software—that is, it respects
users' freedom. The development of GNU made it possible to use a
computer without software that would trample your freedom.
#+END_QUOTE


* Play Emacs like an instrument

** Live Demo

*** The meat part

- Switching gears now into live Emacs usage
- I plan to announce all the new features that I'm touching
- If I'm loosing you, forget to mention the name of a feature or you
  have any other questions, don't hesitate to ask!

** Live Demo

*** Live Coding - what can go wrong?

\framedgraphic{images/lambda_workplace.jpg}

*** Speaker Notes                                                  :noexport:

**** TODO [#A] Prep
- [X] run =vagrant up=
- [X] Move all other =things= tasks
- [ ] Only add the two tasks for the talk
- [ ] Send the mail from "Mr. Important Customer"

#+BEGIN_QUOTE
Dear Alain

I have a high priority task for you. Please create an image gallery of
some Emacs related pictures. A static page will do!

Host: emacs-demo.200ok.ch

Bill me more never leave Emacs to do it!

Thanks,
Alain
#+END_QUOTE

**** TODO [#A] Print the speaker notes and put them on the table
**** TODO [#B] Fold the speaker notes and always jump back to check one task
**** TODO New project == new Emacs

- [ ] Open Emacs-Client

- Mention the speed
- Some people say:
  - Eight Megs And Constantly Swappingo
  - Eventually malloc()s All Computer Storage', and
  - `EMACS Makes A Computer Slow'

- They couldn't be more wrong

**** TODO =things=

- Mention
  - Fold
  - LOC

- There's two tasks:

***** TODO Play Emacs like an instrument                         :clojure.zh:
      DEADLINE: <2018-04-23 Mon>

***** TODO Have a beer
      SCHEDULED: <2018-04-23 Mon>
**** TODO Check =mu4e=

- There's one new mail from "Mr. Important Customer"

- [ ] Say: Yes, I have these kinds of customers, always.
- [ ] Answer the email and say: Right away, Sir!
- [ ] =mu4e=: Search driven, multiple accounts

**** TODO Create a PROJECT from this mail and archive the mail
**** TODO Go to your inbox

- Move the PROJECT into "current 200ok"
- Set it be to scheduled today
- Narrow to the current project
- Create TODOs
  - Find some nice files
  - Copy them to the server
  - Create gallery page
  - Deploy
  - Inform customer that work is done
  - Write a bill and send it
**** TODO Clock in first task
**** TODO Connect through tramp to host

     - [ ] Show dired
     - [ ] Show multi tramp
       - /ssh:emacs-demo|sudo:root@emacs-demo:/var/www/index.html

**** TODO Create gallery html file

- =image-dired=
  - Let the audience choose a couple pictures
  - Copy them to the other buffer (↓)

- Rename all files with =dired=
- Split buffer for =dired= + =eshell=
- =ls -lt=
- Visual Select the image info
- Copy that into a new index.html file
  - Split more buffers =index= + =dired= + =shell=
  - Show some =winner-mode= functionality
- Open it on the browser and see:
  - Already deployed
  - But kinda slow
  - http://emacs-demo.200ok.ch:8081/
  - http://localhost:8080/imp/live/index.html/

***** TODO Magit

- What's the first thing to do in a new project?
  - Create a git repo

- =magit-init=
- Push to remote repo

- Add some more content
- Make a commit

***** TODO =impatient-mode=, =evil=, =undo-tree=, =dired=

- Open it in =impatient-mode=
- Copy the data into the buffer
  - Visual select only the file name column
  - Make some img src tags
  - Do some styling
    - Padding
    - Margin, Border, Center
- [ ] Fuck up somehow, and show =undo-tree=
- [ ] Copy and resize all images with =dired= and =mogrify=
- [ ] Reload deployed URL

**** TODO Event-oriented Hooks

- Wouldn't it be nice if we had a pomodoro timer every time when we
  started a task?
- If only we had an editor that was extensible

- [ ] Find the org-mode clock-in hook
  - [ ] Use Self-documentation
    - =C-h c=, =C-h f=, =C-h a=

- Extend the clock-in hook in *scratch*

#+BEGIN_SRC emacs-lisp
(add-hook 'org-clock-in-hook (lambda ()
                               (org-timer-set-timer 25)))
#+END_SRC


- [ ] Mention that even when Hooks are not available, advising is
  always possible!
  - For example: Auto spell check after new word has been learned

- [ ] Show literate Emacs config

**** TODO Go back to the tasks

- [ ] Mark First three as done

**** TODO Go to the customer email through the todo link

- Send a mail: All done!
- Set to done

**** TODO Make a =clock-report=

**** TODO Make a better =clock-report=

#+BEGIN: clocktable :maxlevel 9 :scope subtree :tstart "<2018-04-13 Fri>" :tend "<2018-04-24 Tue>" :indent nil :tcolumns 1 :timestamp t :formula "$4=$3*150;t" // :step day
#+CAPTION: Clock summary at [2018-04-23 Mon 17:14]
| Timestamp      | Headline                          |   Time |       |
|----------------+-----------------------------------+--------+-------|
|                | *Total time*                      | *0:12* | 30.00 |
|----------------+-----------------------------------+--------+-------|
| 2018-04-13 Fri | TODO Make a better =clock-report= |   0:12 | 30.00 |
|                | Subtask                           |   0:12 | 30.00 |
#+TBLFM: $4=$3*150;t
#+END:

***** Subtask
     CLOCK: [2018-04-23 Mon 17:00]--[2018-04-23 Mon 17:12] =>  0:12

**** TODO Create an invoice from the report
**** TODO Relax a little

- [ ] Read some news in =elfeed=
- [ ] Read some Hacker news in =eww=

**** Now that the super small beginners project is done, do some coding!
     - Fibonacci

**** TODO JavaScript

- Definition: =M-.=
- Doc: =C-c C-d=
- Run: =C-x C-e=

#+BEGIN_SRC

function fib(n) {
  if(n<2) {
    return n
  } else {
    return fib(n-1) + fib(n-2)
  }
}

fib(7)


#+END_SRC
**** TODO Ruby on Rails

- [ ] Go to quickshift =app/models/shift.rb=
- [ ] Fix =do= instead of =Symbol.to_proc=
- [ ] =C-c C-d= Lookup documentation
- [ ] =M-.= Jump to definition
- [ ] Eval: Mark lines and =C-c C-r=


- [ ] New repo
- [ ] =inf-ruby=

#+BEGIN_SRC
def fib(n)
  if n<2
    n
  else
    fib(n-1) + fib(n-2)
  end
end

fib(7)
#+END_SRC


**** TODO Clojure

- Clojure
  - Look up symbol
  - Evaluate buffer
  - evaluate function
  - extract function
  - =C-d C-d a=

- [ ] Go to 200ok.ch repo and inject cider

#+BEGIN_SRC
(defn fib [n]
  (if (< n 2)
    n
    (+ (fib (- n 1))
       (fib (- n 2)))))

(fib 7)
#+END_SRC

**** TODO Last Thing: Go back to =things=

- [ ] Check off =Play Emacs like an instrument=
- [ ] Ask people if they want to join for having a beer
  - [ ] Let's discuss in what order we shall have more Emacs talks on
    the topics that we only broached today

* Closing words

** Original Talk

If you liked this short teaser, please check out the original talk
here:
https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html

** Further reading

If you want to continue on your own:

- Emacs Tutorial: =C-h t= || =M-x help-with-tutorial=
- Emacs Manual: =C-h r= || =M-x info-emacs-manual=
- All info manuals: =C-h i= || =M-x info=
  - =org-mode=
  - =magit=
  - =mu4e=
  - Actually all =info=-manuals from your system and Emacs

- [[https://200ok.ch/category/emacs.html][200ok.ch/category/emacs.html]]
- [[https://200ok.ch/atom.xml][200ok.ch/atom.xml]]

** Further reading

*** Configuration

\framedgraphic[0.6]{images/emacs_demo_literate.png} [fn:24]

** Talk tax

*** Give yourself a chance, use Emacs!

- If you liked this talk, head over to
  https://github.com/munen/emacs.d/, go through the README and enjoy
  magical powers
- Ah, yes - and put a star on the repo, would ya?(;

*** ⋆
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    \includegraphics[height=0.35\textheight]{images/gnu_listen_half.jpg}


*** ⋆
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    \includegraphics[height=0.35\textheight]{images/emacs_logo.png}

* Footnotes

[fn:1] https://www.gnu.org/software/emacs/emacs-paper.html#SEC1

[fn:2] https://www.gnu.org/

[fn:3] https://en.wikipedia.org/wiki/Vim_(text_editor)

[fn:4] Images of Thor from the movie [[https://www.imdb.com/title/tt0094238/?ref_%3Dfn_al_tt_1][*Valhalla* (1986)]]

[fn:5] https://en.wikipedia.org/wiki/Linux

[fn:6] https://en.wikipedia.org/wiki/C_(programming_language)

[fn:7] =org-mode= and =pdf-tools=

[fn:8] https://en.wikipedia.org/wiki/Play_(activity)

[fn:9] https://stallman.org/articles/on-hacking.html

[fn:17] =mu4e=

[fn:18] Spreadsheets, project planning, time tracking, etc with =org-mode=

[fn:19] Browsing [[https://200ok.ch][200ok.ch]] with =eww=

[fn:20] Test Clojure code with =cider=

[fn:21] =magit= (Also: Note how Emacs is configured with literate programming)

[fn:24] Literate Configuration/Programming through =org-mode=
